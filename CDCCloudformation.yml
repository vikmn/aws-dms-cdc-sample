AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS CloudFormation to set up CDC with DMS'
Parameters:
  DatabaseInstanceType:
    Default: db.t2.micro
    AllowedValues:
      - db.t2.micro
      - db.m4.xlarge
      - db.m4.2xlarge
      # - db.r3.4xlarge
      # - db.r3.8xlarge
    Description: The instance type to use for this test iteration.
    Type: String
  TargetS3BucketName:
    Default: vikram-customer-data
    Description: The S3 bucket name for DMS target
    Type: String
  MasterUserPassword:
    NoEcho: true
    Default: a1234567*
    Description: The master password for the DB instance.
    Type: String
  ReplicationInstance:
    Default: dms.t2.micro
    AllowedValues:
      - dms.t2.micro
      - dms.t2.small
    Description: The instance type to use for the replication instance.
    Type: String
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.30.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: foo
        Value: bar
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: foo
        Value: bar
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: foo
        Value: bar
  myRoute:
    Type: AWS::EC2::Route
    DependsOn: myInternetGateway
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myInternetGateway  
  subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 172.30.1.0/24
      AvailabilityZone: "eu-west-2a"
      Tags:
      - Key: foo
        Value: bar
  subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 172.30.2.0/24
      AvailabilityZone: "eu-west-2b"
      Tags:
      - Key: foo
        Value: bar
  subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 172.30.3.0/24
      AvailabilityZone: "eu-west-2c"
      Tags:
      - Key: foo
        Value: bar
  dbSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "Subnet group for database"
      SubnetIds: 
        - !Ref subnet1
        - !Ref subnet2
        - !Ref subnet3
  DMSReplicationSubnetGroup:
    Type: AWS::DMS::ReplicationSubnetGroup
    Properties:
      ReplicationSubnetGroupDescription: "subnet group for replication"
      SubnetIds:
        - !Ref subnet1
        - !Ref subnet2
        - !Ref subnet3
      Tags:
        - Key: foo
          Value: bar
  SQLServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: SQL Server Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '1433'
        ToPort: '1433'
        CidrIp: 0.0.0.0/0
  SQLDatabase:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      VPCSecurityGroups:
        - !Ref SQLServerSecurityGroup
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 1
      DBInstanceClass: !Ref DatabaseInstanceType
      MasterUsername: admin
      MasterUserPassword: !Ref MasterUserPassword
      PubliclyAccessible: true
      Engine: sqlserver-ex
      EngineVersion: 14.00.3015.40.v1
      AllocatedStorage: 100
      # DBSnapshotIdentifier: 'arn:aws:rds:eu-west-2:638426169984:snapshot:sqlcustomer-snapshot-may28'
      DBSubnetGroupName: !Ref dbSubnetGroup
  DMSExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: s3AccessPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
        - PolicyName: dynamoReadPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'dynamodb:ListTables'
                Resource: '*'
        - PolicyName: dynamoModifyPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:DeleteTable'
                  - 'dynamodb:DeleteItem'
                Resource:
                  - !GetAtt
                      - myDynamoDBTable
                      - Arn
  DMSReplicationInstance:
    Type: 'AWS::DMS::ReplicationInstance'
    Properties:
      AllocatedStorage: 100
      MultiAZ: false
      PubliclyAccessible: false
      ReplicationInstanceClass: !Ref ReplicationInstance
      ReplicationSubnetGroupIdentifier: !Ref DMSReplicationSubnetGroup
    # DependsOn:
    #   - DMSExecutionRole
  DMSEndpoint:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EngineName: sqlserver
      EndpointType: source
      Username: AWSUser
      Password: !Ref MasterUserPassword
      ServerName: !Sub '${SQLDatabase.Endpoint.Address}'
      Port: 1433
      DatabaseName: CustomerDB
    DependsOn:
      - SQLDatabase
  myDynamoDBTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "Album"
          AttributeType: "S"
        - 
          AttributeName: "Artist"
          AttributeType: "S"
        - 
          AttributeName: "Sales"
          AttributeType: "N"
        - 
          AttributeName: "NumberOfSongs"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "Album"
          KeyType: "HASH"
        - 
          AttributeName: "Artist"
          KeyType: "RANGE"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "myTableName"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "myGSI"
          KeySchema: 
            - 
              AttributeName: "Sales"
              KeyType: "HASH"
            - 
              AttributeName: "Artist"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "Album"
              - "NumberOfSongs"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
        - 
          IndexName: "myGSI2"
          KeySchema: 
            - 
              AttributeName: "NumberOfSongs"
              KeyType: "HASH"
            - 
              AttributeName: "Sales"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "Album"
              - "Artist"
            ProjectionType: "INCLUDE"
          ProvisionedThroughput: 
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
      LocalSecondaryIndexes: 
        - 
          IndexName: "myLSI"
          KeySchema: 
            - 
              AttributeName: "Album"
              KeyType: "HASH"
            - 
              AttributeName: "Sales"
              KeyType: "RANGE"
          Projection: 
            NonKeyAttributes: 
              - "Artist"
              - "NumberOfSongs"
            ProjectionType: "INCLUDE"
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Ref TargetS3BucketName
  DMSEndpointDDB:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EndpointType: target
      EngineName: dynamodb
      DynamoDbSettings:
        ServiceAccessRoleArn: !GetAtt
          - DMSExecutionRole
          - Arn
    DependsOn:
      - myDynamoDBTable
  DMSEndpointS3:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EndpointType: target
      EngineName: S3
      ExtraConnectionAttributes: 'maxfilesize=102400'
      S3Settings:
        BucketName: !Ref TargetS3BucketName
        ServiceAccessRoleArn: !GetAtt
          - DMSExecutionRole
          - Arn
    DependsOn:
      - S3Bucket
  DMSTaskMigration:
    Type: 'AWS::DMS::ReplicationTask'
    Properties:
      MigrationType: full-load-and-cdc
      ReplicationInstanceArn: !Ref DMSReplicationInstance
      SourceEndpointArn: !Ref DMSEndpoint
      TableMappings: >-
        {"rules": [{"rule-type": "selection", "rule-id": "1", "rule-action":
        "include", "object-locator": {"schema-name": "%", "table-name": "%"},
        "rule-name": "1"}]}
      TargetEndpointArn: !Ref DMSEndpointS3
Outputs:
  SQLDatabaseEndpoint:
    Description: Database endpoint
    Value: !Sub '${SQLDatabase.Endpoint.Address}:${SQLDatabase.Endpoint.Port}'
  S3Bucket:
    Description: S3 bucket Name
    Value: !Ref TargetS3BucketName
  DynamoDb:
    Description: dynamo db instance name
    Value: 'test'
