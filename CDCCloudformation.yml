AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS CloudFormation to set up CDC with DMS'
Parameters:
  DatabaseInstanceType:
    Default: db.m4.xlarge
    AllowedValues:
      - db.m4.xlarge
      - db.m4.2xlarge
      # - db.r3.4xlarge
      # - db.r3.8xlarge
    Description: The instance type to use for this test iteration.
    Type: String
  TargetS3BucketName:
    Default: customer-data-vn
    Description: The S3 bucket name for DMS target
    Type: String
  MasterUserPassword:
    NoEcho: true
    Default: a1234567*
    Description: The master password for the DB instance.
    Type: String
  ReplicationInstance:
    Default: dms.t2.micro
    AllowedValues:
      - dms.t2.micro
      - dms.t2.small
    Description: The instance type to use for the replication instance.
    Type: String
Resources:
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: foo
        Value: bar
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.30.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: foo
        Value: bar
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: foo
        Value: bar
  myRoute:
    Type: AWS::EC2::Route
    DependsOn: myInternetGateway
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myInternetGateway  
  subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 172.30.1.0/24
      AvailabilityZone: "us-east-1a"
      Tags:
      - Key: foo
        Value: bar
  subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 172.30.2.0/24
      AvailabilityZone: "us-east-1b"
      Tags:
      - Key: foo
        Value: bar
  subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 172.30.3.0/24
      AvailabilityZone: "us-east-1c"
      Tags:
      - Key: foo
        Value: bar
  dbSubnetGroup: 
    Type: "AWS::RDS::DBSubnetGroup"
    Properties: 
      DBSubnetGroupDescription: "Subnet group for database"
      SubnetIds: 
        - !Ref subnet1
        - !Ref subnet2
        - !Ref subnet3
  DMSReplicationSubnetGroup:
    Type: AWS::DMS::ReplicationSubnetGroup
    Properties:
      ReplicationSubnetGroupDescription: "subnet group for replication"
      SubnetIds:
        - !Ref subnet1
        - !Ref subnet2
        - !Ref subnet3
      Tags:
        - Key: foo
          Value: bar
  SQLServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref myVPC
      GroupDescription: SQL Server Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '1433'
        ToPort: '1433'
        CidrIp: 0.0.0.0/0
  SQLDatabase:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      VPCSecurityGroups:
        - !Ref SQLServerSecurityGroup
      AutoMinorVersionUpgrade: false
      BackupRetentionPeriod: 1
      CharacterSetName: String
      DBInstanceClass: !Ref DatabaseInstanceType
      MasterUserPassword: !Ref MasterUserPassword
      PubliclyAccessible: true
      # Engine: sqlserver-ex
      DBSnapshotIdentifier: 'arn:aws:rds:us-east-1:638426169984:snapshot:sqlcustomer-snapshot-may28'
      DBSubnetGroupName: !Ref dbSubnetGroup
  DMSExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - dms.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: DMSservicerole
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
  DMSReplicationInstance:
    Type: 'AWS::DMS::ReplicationInstance'
    Properties:
      AllocatedStorage: 100
      MultiAZ: false
      PubliclyAccessible: false
      ReplicationInstanceClass: !Ref ReplicationInstance
      ReplicationSubnetGroupIdentifier: !Ref DMSReplicationSubnetGroup
    # DependsOn:
    #   - DMSExecutionRole
  DMSEndpoint:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EngineName: sqlserver
      EndpointType: source
      Username: AWSUser
      Password: !Ref MasterUserPassword
      ServerName: !Sub '${SQLDatabase.Endpoint.Address}'
      Port: 1433
      DatabaseName: CustomerDB
    DependsOn:
      - SQLDatabase
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: BucketOwnerFullControl
      BucketName: !Ref TargetS3BucketName
  DMSEndpointS3:
    Type: 'AWS::DMS::Endpoint'
    Properties:
      EndpointType: target
      EngineName: S3
      ExtraConnectionAttributes: 'maxfilesize=102400'
      S3Settings:
        BucketName: !Ref TargetS3BucketName
        ServiceAccessRoleArn: !GetAtt 
          - DMSExecutionRole
          - Arn
    DependsOn:
      - S3Bucket
  DMSTaskMigration:
    Type: 'AWS::DMS::ReplicationTask'
    Properties:
      MigrationType: full-load-and-cdc
      ReplicationInstanceArn: !Ref DMSReplicationInstance
      SourceEndpointArn: !Ref DMSEndpoint
      TableMappings: >-
        {"rules": [{"rule-type": "selection", "rule-id": "1", "rule-action":
        "include", "object-locator": {"schema-name": "%", "table-name": "%"},
        "rule-name": "1"}]}
      TargetEndpointArn: !Ref DMSEndpointS3
Outputs:
  SQLDatabaseEndpoint:
    Description: Database endpoint
    Value: !Sub '${SQLDatabase.Endpoint.Address}:${SQLDatabase.Endpoint.Port}'
  S3Bucket:
    Description: S3 bucket Name
    Value: !Ref TargetS3BucketName
